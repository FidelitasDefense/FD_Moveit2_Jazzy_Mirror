cmake_minimum_required(VERSION 3.22)
project(moveit_core LANGUAGES CXX)

# Common cmake code applied to all moveit packages
find_package(moveit_common REQUIRED)
moveit_package()

# Generate and install version.h
string(REGEX REPLACE "^([0-9]+)\\..*" "\\1" MOVEIT_VERSION_MAJOR "${moveit_core_VERSION}")
string(REGEX REPLACE "^[0-9]+\\.([0-9]+).*" "\\1" MOVEIT_VERSION_MINOR "${moveit_core_VERSION}")
string(REGEX REPLACE "^[0-9]+\\.[0-9]+\\.([0-9]+).*" "\\1" MOVEIT_VERSION_PATCH "${moveit_core_VERSION}")
set(MOVEIT_VERSION "${MOVEIT_VERSION_MAJOR}.${MOVEIT_VERSION_MINOR}.${MOVEIT_VERSION_PATCH}")
message(STATUS " *** Building MoveIt ${MOVEIT_VERSION} ***")

find_package(PkgConfig REQUIRED)
pkg_check_modules(LIBFCL REQUIRED "fcl>=0.5.0")
# replace LIBFCL_LIBRARIES with full paths to the libraries
set(LIBFCL_LIBRARIES_FULL "")
foreach(LIBFCL_LIBRARY ${LIBFCL_LIBRARIES})
  find_library(${LIBFCL_LIBRARY}_LIB ${LIBFCL_LIBRARY} ${LIBFCL_LIBRARY_DIRS})
  list(APPEND LIBFCL_LIBRARIES_FULL ${${LIBFCL_LIBRARY}_LIB})
endforeach()
set(LIBFCL_LIBRARIES "${LIBFCL_LIBRARIES_FULL}")


find_package(ament_cmake REQUIRED)
find_package(ament_index_cpp REQUIRED)
find_package(angles REQUIRED)
find_package(Bullet 2.87 REQUIRED)
find_package(common_interfaces REQUIRED)
find_package(eigen_stl_containers REQUIRED)
find_package(Eigen3 REQUIRED)
find_package(eigen3_cmake_module REQUIRED)
find_package(geometric_shapes REQUIRED)
find_package(geometry_msgs REQUIRED)
find_package(kdl_parser REQUIRED)
find_package(moveit_msgs REQUIRED)
find_package(OCTOMAP REQUIRED)
find_package(octomap_msgs REQUIRED)
find_package(pluginlib REQUIRED)
find_package(random_numbers REQUIRED)
find_package(rclcpp REQUIRED)
find_package(ruckig REQUIRED)
find_package(sensor_msgs REQUIRED)
find_package(shape_msgs REQUIRED)
find_package(srdfdom REQUIRED)
find_package(std_msgs REQUIRED)
find_package(tf2_eigen REQUIRED)
find_package(tf2_geometry_msgs REQUIRED)
find_package(tf2_kdl REQUIRED)
find_package(trajectory_msgs REQUIRED)
find_package(urdf REQUIRED)
find_package(urdfdom REQUIRED)
find_package(urdfdom_headers REQUIRED)
find_package(visualization_msgs REQUIRED)

# TODO: Port python bindings
# find_package(pybind11 REQUIRED)

include(ConfigExtras.cmake) # Finds Boost Components
include(GenerateExportHeader)

add_library(moveit_core SHARED)
add_library(moveit::core ALIAS moveit_core)
generate_export_header(moveit_core)
target_include_directories(moveit_core PUBLIC
  $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>
  $<BUILD_INTERFACE:${PROJECT_BINARY_DIR}>
  $<INSTALL_INTERFACE:include/moveit_core>
)
target_link_libraries(moveit_core ruckig::ruckig)
ament_target_dependencies(moveit_core SYSTEM
  ament_index_cpp
  angles
  Boost
  BULLET
  Eigen3
  geometric_shapes
  geometry_msgs
  kdl_parser
  LIBFCL
  moveit_msgs
  OCTOMAP
  octomap_msgs
  orocos_kdl
  pluginlib
  rclcpp
  rmw_implementation
  srdfdom
  srdfdom moveit_msgs
  tf2_eigen
  tf2_geometry_msgs
  urdf
  urdfdom
  urdfdom_headers
  visualization_msgs
)
set_target_properties(moveit_core PROPERTIES VERSION ${moveit_core_VERSION})
add_subdirectory(src)

# TODO: Port python bindings
# add_subdirectory(python)
# pybind_add_module(pymoveit_core
#     python/pymoveit_core.cpp
#     collision_detection/src/pycollision_detection.cpp
#     robot_model/src/pyrobot_model.cpp
#     robot_state/src/pyrobot_state.cpp
#     transforms/src/pytransforms.cpp
#     planning_scene/src/pyplanning_scene.cpp
#     kinematic_constraints/src/pykinematic_constraint.cpp
# )
# target_include_directories(pymoveit_core SYSTEM PRIVATE ${catkin_INCLUDE_DIRS})
# target_link_libraries(pymoveit_core PRIVATE moveit::core ${catkin_LIBRARIES})
#
# #catkin_lint: ignore_once undefined_target (pymoveit_core is defined by pybind_add_module)
# install(TARGETS pymoveit_core LIBRARY DESTINATION ${CATKIN_GLOBAL_PYTHON_DESTINATION})

install(DIRECTORY include/ DESTINATION include/moveit_core)
install(FILES ${PROJECT_BINARY_DIR}/moveit_core_export.h DESTINATION include/moveit_core)

install(
  TARGETS moveit_core
  EXPORT moveit_coreTargets
  LIBRARY DESTINATION lib
  ARCHIVE DESTINATION lib
  RUNTIME DESTINATION bin
)

ament_export_targets(moveit_coreTargets HAS_LIBRARY_TARGET)
ament_export_dependencies(
  angles
  Bullet
  common_interfaces
  eigen_stl_containers
  Eigen3
  eigen3_cmake_module
  geometric_shapes
  geometry_msgs
  kdl_parser
  moveit_msgs
  OCTOMAP
  octomap_msgs
  pluginlib
  random_numbers
  rclcpp
  ruckig
  sensor_msgs
  shape_msgs
  srdfdom
  std_msgs
  tf2_eigen
  tf2_geometry_msgs
  tf2_kdl
  trajectory_msgs
  urdf
  urdfdom
  urdfdom_headers
  visualization_msgs
)

# Plugin exports
pluginlib_export_plugin_description_file(moveit_core collision_detector_fcl_description.xml)
pluginlib_export_plugin_description_file(moveit_core collision_detector_bullet_description.xml)
pluginlib_export_plugin_description_file(moveit_core filter_plugin_butterworth.xml)

if(BUILD_TESTING)
  find_package(ament_lint_auto REQUIRED)

  # These don't pass yet, disable them for now
  set(ament_cmake_copyright_FOUND TRUE)
  set(ament_cmake_cpplint_FOUND TRUE)
  set(ament_cmake_flake8_FOUND TRUE)
  set(ament_cmake_uncrustify_FOUND TRUE)
  set(ament_cmake_lint_cmake_FOUND TRUE)

  # Run all lint tests in package.xml except those listed above
  ament_lint_auto_find_test_dependencies()
endif()

ament_package(CONFIG_EXTRAS ConfigExtras.cmake)
